import telebot
from data import DbHelper
import datetime

with open('token.txt') as file:
    TOKEN = file.readline()
bot = telebot.TeleBot(TOKEN)

back = telebot.types.InlineKeyboardMarkup()
back.add(telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help'))


@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ú–≠–ò, –ø–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.')
    group = db.person_group(message.chat.id)
    if not group:
        db.add_person(message.chat.id, message.from_user.first_name, message.from_user.last_name)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã: ')
        bot.register_next_step_handler(message, add_group_number, message.chat.id)
    else:
        help_command(message)


def add_group_number(message, telegram_id):
    db.add_group(message.text, telegram_id)
    help_command(message)


@bot.message_handler(commands=['help'])
def help_command(message):
    bot.clear_step_handler(message)
    keyboard = telebot.types.InlineKeyboardMarkup()
    if db.if_admin(message.chat.id):
        keyboard.add(telebot.types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data='new_event'))
        keyboard.add(telebot.types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='add_admin'))
        keyboard.add(telebot.types.InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –∞—Ä–µ–Ω–¥—ã –ø–ª–æ—â–∞–¥–∫–∏', callback_data='show_rules'))
        keyboard.add(telebot.types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                                                        callback_data='show_guests'))
    keyboard.add(telebot.types.InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data='registration_event'))
    keyboard.add(telebot.types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data='show_events'))
    keyboard.add(telebot.types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data='show_my_registrations'))
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ', reply_markup=keyboard)


def show_rules(message):
    bot.edit_message_text('–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø—Ä–∞–≤–∏–ª–∞', message.chat.id, message.message_id, reply_markup=back)


def new_event(message):
    bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ', message.chat.id, message.message_id, reply_markup=back)
    bot.register_next_step_handler(message, event_name)


def add_admin(message):
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞. \n'
                                      '1) –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É @mpei_registration_event_bot —á–µ–ª–æ–≤–µ–∫—É\n'
                                      '–ï—Å–ª–∏ –∑–∞–π—Ç–∏ –Ω–∞ –Ω–µ—ë –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–µ–ª–µ–≥—Ä–∞–º, —Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–∞—Ç —Å–æ –º–Ω–æ–π) '
                                      '–ù—É–∂–Ω–æ, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start \n'
                                      '2) –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–∫—Ä—ã—Ç—å '
                                      '–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∞', reply_markup=back)
    bot.register_next_step_handler(message, add_admin_in_db)


def add_admin_in_db(message):
    try:
        if db.if_admin(message.forward_from.id):
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –æ–±–ª–∞–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∞.", reply_markup=back)
        else:
            db.add_admin(message.forward_from.id)
            bot.send_message(message.chat.id, f"{message.forward_from.first_name} {message.forward_from.last_name}"
                                              f" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω(a) –≤ —Å–∏—Å—Ç–µ–º—É! ü•≥", reply_markup=back)
            key = telebot.types.InlineKeyboardMarkup()
            key.add(telebot.types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', callback_data='help'))
            bot.send_message(message.forward_from.id, f"{message.from_user.first_name} "
                                                      f"{message.from_user.last_name} –¥–æ–±–∞–≤–∏–ª(–∞) "
                                                      f"–≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∞. ",
                             reply_markup=key)
    except (ValueError, TypeError, AttributeError):
        bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                         reply_markup=back)
        bot.register_next_step_handler(message, add_admin)


def event_name(message):
    name = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ',
                     reply_markup=back)
    bot.register_next_step_handler(message, event_count, name)


def event_count(message, name):
    try:
        count = int(message.text)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ ', reply_markup=back)
        bot.register_next_step_handler(message, event_day, name, count)
    except ValueError:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ',
                         reply_markup=back)
        bot.register_next_step_handler(message, event_count, name)


def event_day(message, name, count):
    day = message.text
    if len(day) == 10 and day[2] == day[5] == '.':
        try:
            day = list(map(int, day.split('.')))
            day = '-'.join(message.text.split('.')[::-1])
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º ', reply_markup=back)
            bot.register_next_step_handler(message, event_time, name, count, day)
        except ValueError:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ ', reply_markup=back)
            bot.register_next_step_handler(message, event_day, name, count)


def event_time(message, name, count, day):
    time = message.text
    if len(time) == 5 and time[2] == ":":
        try:
            h, m = list(map(int, time.split(":")))
            add_event(message, name, count, day, time)
        except ValueError:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º ", reply_markup=back)
            bot.register_next_step_handler(message, event_time, name, count, day)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º ", reply_markup=back)
        bot.register_next_step_handler(message, event_time, name, count, day)


def add_event(message, name, count, day, time):
    db.del_events()
    db.add_event(name, count, day, time)
    day = list(map(int, day.split('-')))
    key = telebot.types.InlineKeyboardMarkup()
    key.add(
        telebot.types.InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –∞—Ä–µ–Ω–¥—ã –ø–ª–æ—â–∞–¥–∫–∏', callback_data='show_rules'),
        telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help')
    )
    bot.send_message(message.chat.id, f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ "
                                      f"{datetime.date(*day).strftime('%d/%m/%Y')} –≤ {time}\n"
                                      f"–ù–µ–∑–∞–±—É–¥—å—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∞—Ä–µ–Ω–¥—ã –ø–ª–æ—â–∞–¥–∫–∏ üëá",
                     reply_markup=key)


def show_events(message):
    db.del_events()
    text = ''
    events = db.show_events()
    for event in events:
        day = list(map(int, event[3].split('-')))
        text += f"{datetime.date(*day).strftime('%d/%m/%Y')} '{event[1]}' –Ω–∞—á–∞–ª–æ –≤ {event[-1]}\n"
        text += f"–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {event[2]}\n"
        text += '-' * 100
        text += '\n'
    if not text:
        text = '–ë–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç('
    bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=back)


def registration_event(message):
    db.del_events()
    events = db.show_events()
    event_key = telebot.types.InlineKeyboardMarkup()
    if not events:
        bot.edit_message_text('–ë–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç( ', message.chat.id, message.message_id, reply_markup=back)
    else:
        for event in events:
            event_key.add(telebot.types.InlineKeyboardButton(event[1],
                                                             callback_data=f"add_registration_{event[0]}_"
                                                                           f"{message.chat.id}"))
        event_key.add(telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help'))
        bot.edit_message_text('–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ', message.chat.id, message.message_id, reply_markup=event_key)


def add_registration(message, event_id, telegram_id):
    db.del_events()
    if db.get_number_of_available_seats(event_id):
        if db.add_registration(event_id, telegram_id):
            bot.edit_message_text('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ! ü•≥', message.chat.id, message.message_id,
                                  reply_markup=back)
        else:
            bot.edit_message_text('–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ', message.chat.id, message.message_id,
                                  reply_markup=back)
    else:
        bot.edit_message_text('–ú–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(', message.chat.id, message.message_id, reply_markup=back)


def show_guests(message):
    db.del_events()
    events = db.show_events()
    event_key = telebot.types.InlineKeyboardMarkup()
    if not events:
        bot.edit_message_text('–ë–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç( ', message.chat.id, message.message_id, reply_markup=back)
    else:
        for event in events:
            event_key.add(telebot.types.InlineKeyboardButton(event[1],
                                                             callback_data=f"show_guests_for_event_{event[0]}"))
        event_key.add(telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help'))
        bot.edit_message_text('–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ', message.chat.id, message.message_id, reply_markup=event_key)


def show_guests_for_event(message, event_id):
    guests = db.get_guests(event_id)
    text = ''
    count = 0
    for person in guests:
        count += 1
        text += f"{count}) {person[1]} {person[2]} –≥—Ä—É–ø–ø–∞ {person[3]}\n"
    if text:
        bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=back)
    else:
        bot.edit_message_text('–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è(', message.chat.id, message.message_id, reply_markup=back)


def show_my_registrations(message):
    db.del_events()
    text = ''
    events = db.get_my_registrations(message.chat.id)
    for event in events:
        day = list(map(int, event[3].split('-')))
        text += f"{datetime.date(*day).strftime('%d/%m/%Y')} '{event[1]}' –Ω–∞—á–∞–ª–æ –≤ {event[-1]}\n"
        text += f"–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {event[2]}\n"
        text += '-' * 100
        text += '\n'
    if not text:
        text = '–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ('
    bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=back)


@bot.callback_query_handler(func=lambda call: True)
def all_call(call):
    if call.message:
        if call.data == 'help':
            help_command(call.message)
        if call.data == 'new_event':
            new_event(call.message)
        if call.data == 'registration_event':
            registration_event(call.message)
        if call.data == 'show_events':
            show_events(call.message)
        if call.data == 'show_rules':
            show_rules(call.message)
        if call.data == 'add_admin':
            add_admin(call.message)
        if call.data == 'show_my_registrations':
            show_my_registrations(call.message)
        if call.data == 'show_guests':
            show_guests(call.message)
        if 'add_registration_' in call.data:
            a = call.data.split('_')
            add_registration(call.message, int(a[-2]), int(a[-1]))
        if 'show_guests_for_event_' in call.data:
            show_guests_for_event(call.message, int(call.data.split('_')[-1]))


db = DbHelper()
bot.polling(none_stop=True)
